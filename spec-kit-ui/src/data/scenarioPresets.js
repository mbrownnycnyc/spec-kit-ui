const scenarioPresets = [
  {
    id: 'android-mobile',
    name: 'Android Mobile App',
    description: 'Native Android application with modern architecture',
    icon: '🤖',
    featureSpecVars: {
      feature_name: 'Android Mobile Application',
      feature_type: 'Android Mobile App',
      business_objective: 'Create a native Android application that provides seamless user experience with offline capabilities and push notifications',
      user_scenarios: 'Admin: Manage users and settings, Customer: Access core features and personalize experience, Manager: Monitor analytics and generate reports',
      core_capabilities: 'User authentication with biometric support, Real-time data synchronization with offline mode, Push notification system with rich media, Camera and location integration, Material 3 UI with adaptive layouts',
      requirements: 'Performance: <2s startup time, Security: Biometric auth + data encryption, Compliance: Google Play Store + GDPR, Accessibility: WCAG 2.1 with screen reader support',
      integration_context: 'REST APIs with OpenAPI spec, Firebase for backend services, Google Play Services integration, Third-party analytics SDKs, Kotlin Coroutines for async operations',
      success_criteria: '4.5+ star rating, <1% crash rate, 99.9% uptime, 10K+ concurrent users with minimal battery impact'
    },
    implementationPlanVars: {
      project_name: 'Android Mobile Application',
      technology_foundation: 'Kotlin with Jetpack Compose, Material 3 UI, MVVM architecture, Room database, Retrofit for networking, Coroutines for async operations',
      component_architecture: 'Authentication Service (biometric auth, session management, CLI tools for user management), Data Sync Service (offline-first storage, conflict resolution, CLI sync commands), Notification Service (push notifications, rich media, CLI notification testing)',
      data_model: 'User, Profile, Settings, Notification, SyncRecord entities with relationships: User-Profile (1:1), User-Notification (1:N), User-SyncRecord (1:N). Offline-first with encryption and conflict resolution',
      api_contract: 'RESTful endpoints: POST /api/auth/login, GET /api/users/{id}, POST /api/sync. JWT with OAuth 2.0, rate limiting: 100 requests/minute/user',
      testing_approach: 'Test-first with 85% JUnit coverage, integration-first with realistic network conditions, Espresso for UI testing, Robolectric for unit tests',
      deployment_strategy: 'Google Play Store with staged rollout, CI/CD using GitHub Actions, automated testing on emulator matrix, crash reporting with Firebase'
    },
    constitutionVars: {
      project_type: 'Android mobile application',
      code_quality_requirements: 'Kotlin coding standards, Android Lint warnings treated as errors, 90% test coverage',
      testing_standards: 'JUnit for unit tests, Espresso for UI tests, Mockito for mocking, 85% coverage minimum',
      performance_targets: '<2s app startup time, <16ms UI thread response, <50ms API response time, 99.9% uptime',
      security_requirements: 'Biometric authentication, data encryption at rest, SSL pinning, OAuth 2.0 + JWT',
      tech_stack_constraints: 'Kotlin, Jetpack Compose, Room, Retrofit, Coroutines, Dagger Hilt',
      architecture_principles: 'MVVM architecture, Clean Architecture, Repository pattern, Dependency injection',
      documentation_standards: 'KDoc for all public APIs, architecture documentation, README with setup instructions',
      deployment_requirements: 'Google Play Store deployment, CI/CD with GitHub Actions, automated testing',
      regulatory_compliance: 'Google Play Store policies, GDPR compliance, COPPA for family apps',
      team_workflow: 'Agile development, 2-week sprints, peer code reviews, automated testing',
      review_processes: 'Mandatory code review, security review for authentication features, architect approval for major changes',
      success_metrics: '<1% crash rate, >4.5 star rating, <100ms API response time, 99.9% uptime'
    },
    clarifyVars: {
      specification_name: 'Android Mobile Application',
      specification_focus: 'user authentication, data synchronization, push notifications, offline functionality',
      core_functionality_gaps: 'admin user management workflows, data export/import functionality, advanced search and filtering capabilities',
      technical_requirements: 'battery optimization strategies, memory usage limits, background processing constraints, network connectivity handling',
      user_experience_needs: 'tablet UI layout optimization, dark mode implementation, accessibility features for motor impairments, offline mode user guidance',
      business_logic_clarification: 'data retention policies, user account deactivation workflows, content moderation guidelines, notification throttling policies',
      success_criteria: 'user engagement targets, performance benchmarks, error rate thresholds, app store rating goals, crash rate limits'
    },
    taskListVars: {
      project_name: 'Android Mobile Application',
      tech_stack: 'Android (Kotlin), Jetpack Compose, MVVM architecture',
      component_1: 'Authentication Service',
      component_2: 'Data Sync Service',
      component_3: 'Notification Service',
      unit_test_pass_rate: '85%',
      performance_targets: '<2s app startup time, <500ms API response time',
      security_requirements: 'Biometric authentication, data encryption, secure API communication'
    },
    analysisVars: {
      analysis_target: 'Android mobile application',
      project_name: 'Android Mobile Application',
      analysis_type: 'code quality and security audit',
      compliance_framework: 'SDD Constitution, Google Play Store policies',
      test_coverage: '85% unit, 75% integration, 70% E2E',
      security_standards: 'OWASP Mobile Security, Google Security Guidelines',
      quality_thresholds: '<1% critical issues, 95% code coverage'
    },
    implementationVars: {
      component_name: 'AndroidAuthenticationService',
      component_purpose: 'Handle user authentication and session management',
      tech_stack: 'Android (Kotlin), Jetpack Compose, MVVM',
      architecture_pattern: 'Clean Architecture with Repository Pattern',
      component_class_name: 'AuthenticationManager',
      primary_method: 'authenticateUser',
      component_version: '1.0.0',
      component_description: 'Manages user authentication with biometric support',
      deployment_environment: 'production',
      database_config: 'Room database with encryption',
      external_apis: 'Firebase Authentication, Google Sign-In',
      auth_config: 'JWT tokens with OAuth 2.0',
      logging_config: 'Timber with structured logging'
    }
  },
  {
    id: 'ios-mobile',
    name: 'iOS Mobile App',
    description: 'Native iOS application following Apple design guidelines',
    icon: '📱',
    featureSpecVars: {
      feature_name: 'iOS Mobile Application',
      feature_type: 'iOS mobile application',
      business_objective: 'deliver a premium iOS experience with intuitive interface and seamless performance',
      user_scenarios: 'User: Authenticate with Face ID/Touch ID, Admin: Manage app settings and analytics, Customer: Make purchases with Apple Pay',
      core_capabilities: 'biometric authentication, CloudKit synchronization, Apple Pay integration, HealthKit features, iMessage extension support',
      requirements: '<1.5s app launch time, <300ms UI response, App Store Review Guidelines, Apple Human Interface Guidelines, GDPR compliance',
      integration_context: 'Apple ecosystem integration, CloudKit backend, HealthKit data access, Apple Pay processing, third-party iOS SDKs',
      success_criteria: '99.9% uptime, <1% crash rate, App Store approval success, user satisfaction score >4.5'
    },
    implementationPlanVars: {
      project_name: 'iOS Mobile Application',
      technology_foundation: 'Swift/SwiftUI/Combine with Core Data and CloudKit, Apple native frameworks, TestFlight deployment, MVVM architecture',
      component_architecture: 'Authentication Service (biometrics, iCloud), Data Sync Manager (Core Data, CloudKit), Apple Pay Integration (transactions, payment processing) - each as standalone modules with clear interfaces',
      data_model: 'User, Profile, Transaction, Preference, SyncData entities with relationships: User-Profile (1:1), User-Transaction (1:N), User-Preference (1:1). Privacy-first design with encryption',
      api_contract: 'CloudKit web services and Apple native APIs with Combine publishers, biometric authentication via LocalAuthentication framework, payment processing via PassKit',
      testing_approach: 'XCTest framework with 90% unit coverage, XCUITest for integration testing, TestFlight beta testing, device compatibility matrix, performance testing for launch times',
      deployment_strategy: 'App Store deployment with TestFlight beta testing, CI/CD with Xcode Cloud, automated builds and releases, crash reporting integration, App Store optimization'
    },
    constitutionVars: {
      project_type: 'iOS mobile application',
      code_quality_requirements: 'Swift coding standards, SwiftLint strict mode, 90% test coverage, memory safety, protocol-oriented design',
      testing_standards: 'XCTest for unit tests, XCUITest for automation, 90% coverage minimum, device compatibility testing',
      performance_targets: '<1.5s app launch time, <16ms UI response, <200ms API response, 99.9% uptime, battery efficiency',
      security_requirements: 'Biometric authentication, Keychain security, App Transport Security, data encryption, privacy-first design',
      tech_stack_constraints: 'Swift, SwiftUI, Combine, Core Data, CloudKit, Apple native frameworks only',
      architecture_principles: 'MVVM pattern, Clean Architecture, Combine framework, protocol-oriented design, modular components',
      documentation_standards: 'SwiftDoc for all public APIs, Xcode markup, README with setup instructions, architecture diagrams',
      deployment_requirements: 'App Store deployment, TestFlight beta testing, CI/CD with Xcode Cloud, automated releases',
      regulatory_compliance: 'App Store Review Guidelines, Apple Human Interface Guidelines, GDPR, ATT, privacy regulations',
      team_workflow: 'Agile development, 1-week sprints, app store review management, automated testing, UX reviews',
      review_processes: 'Mandatory code review, UI/UX review, App Store guideline compliance check, security audit',
      success_metrics: '<1% crash rate, >4.5 star rating, <50ms UI response time, 99.9% uptime, user satisfaction'
    },
    clarifyVars: {
      specification_name: 'iOS Mobile App Feature Specification',
      specification_focus: 'biometric authentication, CloudKit synchronization, Apple Pay integration, HealthKit features',
      specification_state: 'initial draft with Apple ecosystem integration defined',
      missing_user_stories: 'Family Sharing support, Apple Watch companion app, advanced HealthKit features',
      unclear_features: 'background app refresh behavior, iCloud sync conflict resolution, offline mode limits',
      edge_cases: 'low storage scenarios, network connectivity loss, iCloud account switching, data migration',
      performance_ambiguities: 'background processing limits, memory usage constraints, battery optimization',
      integration_questions: 'CloudKit container configuration, HealthKit data sharing, Apple Pay testing environment',
      security_considerations: 'Keychain data storage, biometric fallback options, data encryption requirements'
    },
    taskListVars: {
      project_name: 'iOS Mobile Application',
      tech_stack: 'iOS (Swift), SwiftUI, Combine framework',
      component_1: 'Authentication Module',
      component_2: 'Data Sync Manager',
      component_3: 'Notification Service',
      unit_test_pass_rate: '90%',
      performance_targets: '<1.5s app launch time, <300ms API response time',
      security_requirements: 'Biometric authentication, Keychain security, data encryption'
    },
    analysisVars: {
      analysis_target: 'iOS mobile application',
      project_name: 'iOS Mobile Application',
      analysis_type: 'code quality and performance audit',
      compliance_framework: 'SDD Constitution, Apple Human Interface Guidelines',
      test_coverage: '90% unit, 80% integration, 75% E2E',
      security_standards: 'Apple Security Guidelines, OWASP Mobile Security',
      quality_thresholds: '<0.5% critical issues, 97% code coverage'
    },
    implementationVars: {
      component_name: 'iOSAuthenticationManager',
      component_purpose: 'Handle user authentication with biometric support',
      tech_stack: 'iOS (Swift), SwiftUI, Combine',
      architecture_pattern: 'MVVM with Coordinator Pattern',
      component_class_name: 'AuthenticationCoordinator',
      primary_method: 'authenticateWithBiometrics',
      component_version: '1.0.0',
      component_description: 'Manages iOS authentication with Face ID/Touch ID',
      deployment_environment: 'production',
      database_config: 'Core Data with CloudKit sync',
      external_apis: 'CloudKit, Apple Pay, HealthKit',
      auth_config: 'Keychain storage with OAuth 2.0',
      logging_config: 'OSLog with structured logging'
    }
  },
  {
    id: 'web-app',
    name: 'Web Application',
    description: 'Modern responsive web application with PWA capabilities',
    icon: '🌐',
    featureSpecVars: {
      feature_name: 'Progressive Web Application',
      feature_type: 'progressive web application (PWA)',
      business_objective: 'provide a responsive web experience that works across all devices and supports offline functionality',
      user_scenarios: 'User: Access from any device with offline support, Admin: Manage content and analytics, Developer: Deploy and monitor performance',
      core_capabilities: 'responsive design, offline capabilities, push notifications, SEO optimization, cross-browser compatibility, PWA installation',
      requirements: '<3s first contentful paint, <1s time to interactive, 90+ Lighthouse score, WCAG 2.1 accessibility, GDPR/CCPA compliance',
      integration_context: 'third-party APIs, analytics platforms, payment gateways, content management systems, service workers, cloud hosting',
      success_criteria: '99.9% uptime, 50,000+ concurrent users, 90+ Lighthouse score, successful PWA installation rate >80%'
    },
    implementationPlanVars: {
      project_name: 'Progressive Web Application',
      technology_foundation: 'React/TypeScript/Next.js with PostgreSQL and Redis, Vercel deployment, service workers, CI/CD automation',
      component_architecture: 'Authentication System (social login, sessions), Service Worker Manager (offline caching, sync), API Gateway (rate limiting, caching) - each as standalone libraries with CLI interfaces',
      data_model: 'User, Session, Cache, Config, AuditLog entities with relationships: User-Session (1:N), User-Cache (1:N), Config-AuditLog (1:N). Focus on offline data consistency and cache invalidation',
      api_contract: 'RESTful APIs with GraphQL support and OpenAPI documentation, JWT authentication with OAuth 2.0, rate limiting: 1000 requests/hour/IP, social login integration',
      testing_approach: '90% unit coverage with Jest and React Testing Library, integration testing for APIs and database, E2E testing with Cypress for critical user journeys, Lighthouse performance monitoring',
      deployment_strategy: 'Vercel multi-region deployment with CI/CD pipeline, automated testing and builds, service worker deployment strategy, cache invalidation, A/B testing framework'
    },
    constitutionVars: {
      project_type: 'progressive web application (PWA)',
      code_quality_requirements: 'TypeScript strict mode, ESLint configuration, Prettier formatting, 90% test coverage, component documentation',
      testing_standards: 'Jest for unit tests, React Testing Library, Cypress for E2E, 90% coverage minimum, accessibility testing',
      performance_targets: '<3s first contentful paint, <1s time to interactive, 90+ Lighthouse score, Core Web Vitals optimization',
      security_requirements: 'HTTPS enforcement, CSP headers, XSS protection, CSRF protection, secure cookies, input validation',
      tech_stack_constraints: 'React, TypeScript, Next.js, Tailwind CSS, Vercel deployment, PostgreSQL database, service workers',
      architecture_principles: 'Component-based architecture, service workers, progressive enhancement, offline-first, responsive design',
      documentation_standards: 'JSDoc comments, Storybook for components, API documentation with OpenAPI, architecture diagrams',
      deployment_requirements: 'Vercel deployment, CI/CD pipeline, automated testing, multi-region CDN, progressive deployment',
      regulatory_compliance: 'GDPR, CCPA, WCAG 2.1 accessibility, cookie consent, data privacy, security standards',
      team_workflow: 'Agile development, 2-week sprints, code reviews, automated testing, feature flags, performance monitoring',
      review_processes: 'Mandatory code review, security review for auth features, performance review, accessibility review',
      success_metrics: '<2s page load, 99.9% uptime, 90+ Lighthouse score, 95% test coverage, user satisfaction'
    },
    clarifyVars: {
      specification_name: 'Progressive Web Application Specification',
      specification_focus: 'offline functionality, responsive design, PWA features, performance optimization',
      specification_state: 'initial draft with core PWA requirements identified',
      missing_user_stories: 'offline mode management, install prompts, background sync features',
      unclear_features: 'service worker caching strategy, offline data sync, push notification handling',
      edge_cases: 'network connectivity loss, browser compatibility issues, storage quota exceeded',
      performance_ambiguities: 'cache invalidation strategies, image optimization, bundle size limits',
      integration_questions: 'third-party service dependencies, analytics integration, payment gateway requirements',
      security_considerations: 'offline data security, service worker security, XSS prevention in offline mode'
    },
    taskListVars: {
      project_name: 'Progressive Web Application',
      tech_stack: 'React, TypeScript, Next.js, Tailwind CSS',
      component_1: 'Authentication System',
      component_2: 'Service Worker Manager',
      component_3: 'API Gateway',
      unit_test_pass_rate: '90%',
      performance_targets: '<3s first contentful paint, <1s time to interactive',
      security_requirements: 'JWT authentication, input validation, XSS protection'
    },
    analysisVars: {
      analysis_target: 'progressive web application',
      project_name: 'Progressive Web Application',
      analysis_type: 'performance and accessibility audit',
      compliance_framework: 'SDD Constitution, WCAG 2.1, GDPR',
      test_coverage: '90% unit, 85% integration, 80% E2E',
      security_standards: 'OWASP Web Security, Lighthouse guidelines',
      quality_thresholds: '<1% critical issues, 90+ Lighthouse score'
    },
    implementationVars: {
      component_name: 'PWAAuthenticationService',
      component_purpose: 'Handle user authentication and session management',
      tech_stack: 'React, TypeScript, Next.js',
      architecture_pattern: 'Clean Architecture with CQRS',
      component_class_name: 'AuthManager',
      primary_method: 'authenticateUser',
      component_version: '1.0.0',
      component_description: 'Manages authentication with social login support',
      deployment_environment: 'Vercel multi-region',
      database_config: 'PostgreSQL with Redis caching',
      external_apis: 'Auth providers, payment gateways, analytics',
      auth_config: 'JWT with OAuth 2.0 and refresh tokens',
      logging_config: 'Winston with structured logging'
    }
  },
  {
    id: 'saas-platform',
    name: 'SaaS Platform',
    description: 'Multi-tenant software-as-a-service platform',
    icon: '☁️',
    featureSpecVars: {
      feature_name: 'Multi-Tenant SaaS Platform',
      feature_type: 'multi-tenant SaaS platform',
      business_objective: 'provide a scalable, secure platform for multiple organizations with customizable features and real-time analytics',
      user_scenarios: 'Admin: Manage organization and users, Developer: Integrate APIs and customize features, Customer: Access enterprise features and analytics',
      core_capabilities: 'multi-tenant architecture, role-based access control, API integration, billing system, analytics dashboard, real-time monitoring',
      requirements: '<2s API response time, 99.9% uptime, horizontal scalability, SOC 2/ISO 27001 compliance, GDPR/HIPAA if applicable',
      integration_context: 'payment processors, email services, CRM systems, monitoring tools, identity providers, analytics platforms',
      success_criteria: '10,000+ organizations, 100,000+ concurrent users, 99.9% uptime, tenant isolation security, real-time analytics <1s latency'
    },
    implementationPlanVars: {
      project_name: 'Multi-Tenant SaaS Platform',
      technology_foundation: 'Cloud-native microservices with Kubernetes, PostgreSQL tenant isolation, Redis/Elasticsearch, React/TypeScript micro-frontends, multi-region deployment',
      component_architecture: 'Tenant Management Service (provisioning, isolation), Billing & Subscription Service (payments, invoicing), Analytics Engine (real-time reporting) - each as standalone libraries with CLI interfaces',
      data_model: 'Tenant, User, Subscription, Invoice, AnalyticsData entities with relationships: Tenant-User (1:N), Tenant-Subscription (1:1), User-AnalyticsData (1:N). Strict tenant isolation and compliance requirements',
      api_contract: 'RESTful APIs with tenant context and rate limiting, OAuth 2.0 with JWT and MFA, per-tenant rate limiting with burst handling, comprehensive audit logging',
      testing_approach: '95% unit coverage with comprehensive mocking, integration testing for all service integrations and tenant isolation, E2E testing for multi-tenant workflows, chaos engineering, load testing',
      deployment_strategy: 'Kubernetes on AWS/GCP with Helm charts, multi-region deployment, blue-green deployments, automated scaling, comprehensive monitoring and alerting'
    },
    constitutionVars: {
      project_type: 'multi-tenant SaaS platform',
      code_quality_requirements: 'Multi-language standards, container security, 95% test coverage, code quality gates, SAST/DAST scanning',
      testing_standards: 'Multi-service testing, chaos engineering, load testing, 95% coverage minimum, tenant isolation testing',
      performance_targets: '<2s API response, 99.9% uptime, horizontal scaling, <100ms tenant provisioning, auto-scaling thresholds',
      security_requirements: 'Multi-tenant isolation, encryption at rest/transit, RBAC, audit logging, MFA, zero-trust architecture',
      tech_stack_constraints: 'Cloud-native, container-based, microservices, Kubernetes, AWS/GCP services, Istio service mesh',
      architecture_principles: 'Microservices, tenant isolation, event-driven, API-first, infrastructure as code, immutable infrastructure',
      documentation_standards: 'API documentation, architecture diagrams, runbooks, compliance documentation, tenant setup guides',
      deployment_requirements: 'Kubernetes, Istio service mesh, Helm charts, GitOps, multi-region deployment, blue-green deployments',
      regulatory_compliance: 'SOC 2, ISO 27001, GDPR, HIPAA, data residency requirements, industry-specific regulations',
      team_workflow: 'DevOps practices, infrastructure as code, automated testing, incident management, compliance monitoring',
      review_processes: 'Security review, architecture review, compliance review, performance review, tenant onboarding review',
      success_metrics: '99.9% uptime, <2s API response, 95% test coverage, zero security incidents, tenant satisfaction >90%'
    },
    clarifyVars: {
      specification_name: 'Multi-Tenant SaaS Platform Specification',
      specification_focus: 'tenant isolation, billing system, analytics dashboard, API management',
      specification_state: 'initial draft with multi-tenant architecture defined',
      missing_user_stories: 'tenant onboarding workflows, admin dashboard, custom configuration options',
      unclear_features: 'tenant customization limits, data migration strategies, API versioning approach',
      edge_cases: 'tenant resource exhaustion, data conflicts, cross-tenant data access, compliance violations',
      performance_ambiguities: 'concurrent tenant limits, data processing requirements, scaling thresholds',
      integration_questions: 'third-party service dependencies, payment processor integration, monitoring tools',
      security_considerations: 'tenant isolation mechanisms, data encryption requirements, audit logging scope'
    },
    taskListVars: {
      project_name: 'Multi-Tenant SaaS Platform',
      tech_stack: 'Microservices, Kubernetes, React, Node.js, PostgreSQL',
      component_1: 'Tenant Management Service',
      component_2: 'Billing & Subscription Service',
      component_3: 'Analytics Engine',
      unit_test_pass_rate: '95%',
      performance_targets: '<2s API response time, 99.9% uptime',
      security_requirements: 'Multi-tenant isolation, RBAC, data encryption'
    },
    analysisVars: {
      analysis_target: 'multi-tenant SaaS platform',
      project_name: 'Multi-Tenant SaaS Platform',
      analysis_type: 'scalability and security audit',
      compliance_framework: 'SDD Constitution, SOC 2, ISO 27001, GDPR',
      test_coverage: '95% unit, 90% integration, 85% E2E',
      security_standards: 'OWASP API Security, Cloud Security Best Practices',
      quality_thresholds: '99.9% uptime, <2s response time, zero security incidents'
    },
    implementationVars: {
      component_name: 'SaaSTenantManagementService',
      component_purpose: 'Handle tenant provisioning, configuration, and isolation',
      tech_stack: 'Node.js, Kubernetes, PostgreSQL, Redis',
      architecture_pattern: 'Microservices with Event-Driven Architecture',
      component_class_name: 'TenantManager',
      primary_method: 'provisionTenant',
      component_version: '1.0.0',
      component_description: 'Manages multi-tenant architecture with isolation',
      deployment_environment: 'Kubernetes multi-region',
      database_config: 'PostgreSQL with tenant isolation and Redis caching',
      external_apis: 'Payment processors, email services, monitoring tools',
      auth_config: 'OAuth 2.0 with JWT and multi-factor authentication',
      logging_config: 'Structured logging with ELK stack'
    }
  },
  {
    id: 'api-service',
    name: 'API Service',
    description: 'RESTful API service with comprehensive documentation',
    icon: '🔧',
    featureSpecVars: {
      feature_name: 'RESTful API Service',
      feature_type: 'RESTful API service',
      business_objective: 'provide reliable, scalable APIs for external and internal consumption with comprehensive monitoring and documentation',
      user_scenarios: 'Developer: Integrate with API using SDKs, Admin: Monitor API usage and performance, Partner: Access APIs through developer portal',
      core_capabilities: 'RESTful design, comprehensive documentation, rate limiting, monitoring, SDK support, authentication, auto-scaling',
      requirements: '<100ms response time, 99.99% uptime, auto-scaling, API security best practices, data privacy regulations',
      integration_context: 'databases, external APIs, authentication services, monitoring tools, caching layers, CDN',
      success_criteria: 'millions of requests per day, 99.99% uptime, developer satisfaction >90%, comprehensive API coverage'
    },
    implementationPlanVars: {
      project_name: 'RESTful API Service',
      technology_foundation: 'API-first design with Node.js/Python, PostgreSQL with read replicas, Redis caching, Kubernetes orchestration, comprehensive monitoring',
      component_architecture: 'API Gateway (routing, auth, rate limiting), Authentication Service (API keys, OAuth), Monitoring & Analytics (usage analytics, performance) - each as standalone libraries with CLI interfaces',
      data_model: 'APIKey, User, RequestLog, RateLimit, Analytics entities with relationships: User-APIKey (1:N), APIKey-RequestLog (1:N). Focus on API key security and request logging privacy',
      api_contract: 'Well-designed RESTful endpoints with HATEOAS support, OpenAPI 3.0 specification, API keys and OAuth 2.0 tokens, tiered rate limiting based on subscription level',
      testing_approach: '95% unit coverage with comprehensive error scenario testing, integration testing for all database operations and external integrations, E2E API contract testing with load testing and chaos engineering',
      deployment_strategy: 'Docker containers with Kubernetes orchestration, blue-green deployments, auto-scaling, comprehensive monitoring and alerting, API documentation portal'
    },
    constitutionVars: {
      project_type: 'RESTful API service',
      code_quality_requirements: 'API-first standards, OpenAPI specification, 95% test coverage, linting rules, API contract testing',
      testing_standards: 'Contract testing, load testing, chaos engineering, 95% coverage minimum, API version testing',
      performance_targets: '<100ms response time, 99.99% uptime, auto-scaling, 1000+ RPS, circuit breaker patterns',
      security_requirements: 'API security, OAuth 2.0, rate limiting, DDoS protection, audit logging, input validation',
      tech_stack_constraints: 'API Gateway, Node.js/Python, PostgreSQL, Redis, Kubernetes, monitoring tools, service mesh',
      architecture_principles: 'API-first design, microservices, event-driven, circuit breakers, auto-scaling, stateless services',
      documentation_standards: 'OpenAPI 3.0 specification, API documentation, developer guides, SDK documentation',
      deployment_requirements: 'Kubernetes, Istio service mesh, GitOps, blue-green deployments, canary releases',
      regulatory_compliance: 'API security best practices, data privacy regulations, industry standards, PCI DSS if applicable',
      team_workflow: 'API-first development, contract testing, monitoring, incident response, developer support',
      review_processes: 'API design review, security review, performance review, compliance review, developer experience review',
      success_metrics: '99.99% uptime, <100ms response time, 99.9% SLA, zero security breaches, developer satisfaction >90%'
    },
    clarifyVars: {
      specification_name: 'RESTful API Service Specification',
      specification_focus: 'API design, rate limiting, authentication, monitoring, documentation',
      specification_state: 'initial draft with core API contracts defined',
      missing_user_stories: 'API key management, developer portal features, webhook integration',
      unclear_features: 'rate limiting strategy, API versioning approach, error response formats',
      edge_cases: 'API authentication failures, rate limit exhaustion, malformed requests, DDoS attacks',
      performance_ambiguities: 'concurrent request limits, data processing requirements, caching strategies',
      integration_questions: 'third-party API dependencies, database connection pooling, monitoring tools',
      security_considerations: 'API key management, authentication token lifecycle, request validation'
    },
    taskListVars: {
      project_name: 'RESTful API Service',
      tech_stack: 'Node.js, Python, Express, FastAPI, PostgreSQL, Redis',
      component_1: 'API Gateway',
      component_2: 'Authentication Service',
      component_3: 'Monitoring & Analytics',
      unit_test_pass_rate: '95%',
      performance_targets: '<100ms response time, 99.99% uptime',
      security_requirements: 'API security, OAuth 2.0, rate limiting'
    },
    analysisVars: {
      analysis_target: 'RESTful API service',
      project_name: 'RESTful API Service',
      analysis_type: 'performance and security audit',
      compliance_framework: 'SDD Constitution, OWASP API Security, SOC 2',
      test_coverage: '95% unit, 90% integration, 85% E2E',
      security_standards: 'OWASP API Security Top 10, API Security Best Practices',
      quality_thresholds: '99.99% uptime, <100ms response, zero security breaches'
    },
    implementationVars: {
      component_name: 'APIGatewayService',
      component_purpose: 'Handle request routing, authentication, and rate limiting',
      tech_stack: 'Node.js, Express, Redis, Kubernetes',
      architecture_pattern: 'API Gateway pattern with Circuit Breakers',
      component_class_name: 'APIGateway',
      primary_method: 'routeRequest',
      component_version: '1.0.0',
      component_description: 'Manages API requests with authentication and rate limiting',
      deployment_environment: 'Kubernetes with auto-scaling',
      database_config: 'PostgreSQL with read replicas and Redis caching',
      external_apis: 'Authentication services, monitoring tools, external APIs',
      auth_config: 'OAuth 2.0 with JWT and API key support',
      logging_config: 'Structured logging with ELK stack and Prometheus'
    }
  },
  {
    id: 'desktop-app',
    name: 'Desktop Application',
    description: 'Cross-platform desktop application with native performance',
    icon: '💻',
    featureSpecVars: {
      feature_name: 'Cross-Platform Desktop Application',
      feature_type: 'cross-platform desktop application',
      business_objective: 'provide native desktop experience with offline capabilities and system integration across multiple platforms',
      user_scenarios: 'User: Install and run on preferred OS, Admin: Manage settings and updates, Developer: Extend with plugins and integrations',
      core_capabilities: 'cross-platform support, offline functionality, system notifications, file system access, hardware integration, auto-updates',
      requirements: '<2s app startup, <100ms UI response, minimal memory footprint, platform-specific requirements, data privacy compliance',
      integration_context: 'operating system APIs, local databases, cloud services, system utilities, native modules, plugin architecture',
      success_criteria: 'native performance on all platforms, seamless offline experience, user satisfaction >90%, efficient resource usage'
    },
    implementationPlanVars: {
      project_name: 'Cross-Platform Desktop Application',
      technology_foundation: 'Electron/Tauri with React/TypeScript or Rust, SQLite local storage, cloud sync, platform-specific installers with auto-update',
      component_architecture: 'System Integration Manager (notifications, files, hardware), Data Synchronization Service (offline storage, cloud sync), Auto-Update System (updates, version management) - each as standalone libraries with CLI interfaces',
      data_model: 'User, Settings, LocalData, SyncRecord, UpdateLog entities with relationships: User-Settings (1:1), User-LocalData (1:N), User-SyncRecord (1:N). Focus on local data encryption and sync conflict resolution',
      api_contract: 'Local APIs for system integration and cloud sync endpoints, local authentication with optional cloud account sync, secure local API communication',
      testing_approach: '90% unit coverage with platform-specific testing, integration testing for all system integrations and file operations, E2E testing for cross-platform user workflows with automated UI testing',
      deployment_strategy: 'Platform-specific installers with auto-update, CI/CD for multiple platforms, code signing, notarization, app store distribution if applicable'
    },
    constitutionVars: {
      project_type: 'cross-platform desktop application',
      code_quality_requirements: 'Platform-specific standards, memory safety, 90% test coverage, native performance, code linting',
      testing_standards: 'Unit testing, integration testing, UI automation, 90% coverage minimum, platform compatibility testing',
      performance_targets: '<2s startup time, <100ms UI response, minimal memory usage, native performance, battery efficiency',
      security_requirements: 'Local data encryption, secure updates, system integration security, code signing, secure storage',
      tech_stack_constraints: 'Electron or Tauri framework, TypeScript/Rust, SQLite, native modules, platform APIs',
      architecture_principles: 'Cross-platform compatibility, native performance, offline-first, system integration, modular design',
      documentation_standards: 'Platform-specific documentation, API documentation, setup guides, developer guides',
      deployment_requirements: 'Platform-specific installers, auto-update, code signing, distribution channels, CI/CD automation',
      regulatory_compliance: 'Platform store requirements, data privacy, security certifications, accessibility standards',
      team_workflow: 'Cross-platform development, testing automation, release management, platform-specific expertise',
      review_processes: 'Code review, security review, performance review, platform compatibility testing, UX review',
      success_metrics: '<2s startup, <100ms UI response, 99.9% stability, native performance feel, user satisfaction'
    },
    clarifyVars: {
      specification_name: 'Cross-Platform Desktop Application Specification',
      specification_focus: 'system integration, offline capabilities, cross-platform compatibility, native features',
      specification_state: 'initial draft with cross-platform requirements identified',
      unclear_elements: 'hardware integration approach, system resource usage, update mechanism behavior, offline sync strategy, native performance targets, cross-platform UI consistency',
      stakeholder_alignment: 'development team needs clear platform priorities, UX team needs design system requirements, operations needs deployment strategy',
      technical_concerns: 'memory usage limits, CPU usage targets, battery optimization requirements, system API dependencies, hardware integration requirements',
      validation_priorities: 'cross-platform testing, performance benchmarks, offline functionality testing, system integration testing, update mechanism testing',
      refinement_focus: 'platform-specific capabilities, system integration patterns, offline-first architecture, native performance optimization',
      undefined_metrics: 'resource usage targets, user adoption goals, crash rate thresholds',
      testing_requirements: 'cross-platform testing, hardware integration testing, performance testing',
      deployment_considerations: 'platform-specific packaging, code signing, distribution channels, update strategy'
    },
    taskListVars: {
      project_name: 'Cross-Platform Desktop Application',
      tech_stack: 'Electron/Tauri, React/TypeScript, SQLite, Node.js/Rust',
      component_1: 'System Integration Manager',
      component_2: 'Data Synchronization Service',
      component_3: 'Auto-Update System',
      unit_test_pass_rate: '90%',
      performance_targets: '<2s app startup, <100ms UI response',
      security_requirements: 'Local data encryption, secure updates, system integration security'
    },
    analysisVars: {
      analysis_target: 'cross-platform desktop application',
      project_name: 'Cross-Platform Desktop Application',
      analysis_type: 'performance and compatibility audit',
      compliance_framework: 'SDD Constitution, platform-specific requirements',
      test_coverage: '90% unit, 85% integration, 80% E2E',
      security_standards: 'Platform security guidelines, data encryption standards',
      quality_thresholds: '<2s startup, <100ms UI response, 99.9% stability'
    },
    implementationVars: {
      component_name: 'DesktopSystemIntegrationManager',
      component_purpose: 'Handle OS-level features like notifications, files, and hardware',
      tech_stack: 'Electron/Tauri, React/TypeScript, Node.js/Rust',
      architecture_pattern: 'Cross-platform architecture with Native Modules',
      component_class_name: 'SystemIntegrationManager',
      primary_method: 'integrateWithSystem',
      component_version: '1.0.0',
      component_description: 'Manages cross-platform system integration',
      deployment_environment: 'Windows, macOS, Linux',
      database_config: 'SQLite for local storage with cloud sync',
      external_apis: 'System APIs, cloud services, hardware APIs',
      auth_config: 'Local authentication with optional cloud sync',
      logging_config: 'Platform-specific logging with cloud sync'
    }
  }
]

export default scenarioPresets